@{
    ViewData["Title"] = "Notification Test";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="h3 mb-0">
                    <i class="fas fa-bell me-2 text-primary"></i>Notification System Test
                </h1>
                <p class="text-muted mb-0">Test the real-time notification system</p>
            </div>
        </div>

        <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i>
            <strong>Instructions:</strong> Click the buttons below to test different types of notifications. 
            Watch the notification bell in the top navigation for real-time updates!
        </div>

        <!-- Connection Status Card -->
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="fas fa-wifi me-2"></i>Connection Status
                </h5>
                <div class="d-flex align-items-center">
                    <span class="me-2">SignalR:</span>
                    <span id="connection-status-display" class="badge bg-secondary">Checking...</span>
                    <button class="btn btn-sm btn-outline-secondary ms-3" onclick="checkConnection()">
                        <i class="fas fa-refresh me-1"></i>Refresh
                    </button>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Individual Test Notifications -->
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-vial me-2"></i>Individual Test Notifications
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <form method="post" asp-action="SendTestNotification">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="type" value="TaskDue" />
                                    <button type="submit" class="btn btn-warning w-100">
                                        <i class="fas fa-clock me-2"></i>Task Due Notification
                                    </button>
                                </form>
                            </div>
                            <div class="col-md-6">
                                <form method="post" asp-action="SendTestNotification">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="type" value="TaskOverdue" />
                                    <button type="submit" class="btn btn-danger w-100">
                                        <i class="fas fa-exclamation-triangle me-2"></i>Task Overdue
                                    </button>
                                </form>
                            </div>
                            <div class="col-md-6">
                                <form method="post" asp-action="SendTestNotification">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="type" value="TaskCompleted" />
                                    <button type="submit" class="btn btn-success w-100">
                                        <i class="fas fa-check-circle me-2"></i>Task Completed
                                    </button>
                                </form>
                            </div>
                            <div class="col-md-6">
                                <form method="post" asp-action="SendTestNotification">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="type" value="ProjectCreated" />
                                    <button type="submit" class="btn btn-info w-100">
                                        <i class="fas fa-folder-plus me-2"></i>Project Created
                                    </button>
                                </form>
                            </div>
                            <div class="col-md-6">
                                <form method="post" asp-action="SendTestNotification">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="type" value="Reminder" />
                                    <button type="submit" class="btn btn-primary w-100">
                                        <i class="fas fa-bell me-2"></i>Reminder
                                    </button>
                                </form>
                            </div>
                            <div class="col-md-6">
                                <form method="post" asp-action="SendTestNotification">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="type" value="System" />
                                    <button type="submit" class="btn btn-secondary w-100">
                                        <i class="fas fa-cog me-2"></i>System Message
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-rocket me-2"></i>Bulk Test
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted">Send multiple notifications at once for testing.</p>
                        <form method="post" asp-action="SendBulkTest">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-outline-primary w-100">
                                <i class="fas fa-paper-plane me-2"></i>Send Multiple Notifications
                            </button>
                        </form>
                    </div>
                </div>

                <div class="card mt-3">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-tools me-2"></i>Quick Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-warning" onclick="notificationManager && notificationManager.markAllAsRead()">
                                <i class="fas fa-check-double me-2"></i>Mark All Read
                            </button>
                            <button class="btn btn-outline-info" onclick="testMvcEndpoint()">
                                <i class="fas fa-code me-2"></i>Test MVC Endpoint
                            </button>
                            <button class="btn btn-outline-secondary" onclick="showDebugInfo()">
                                <i class="fas fa-bug me-2"></i>Debug Info
                            </button>
                        </div>
                    </div>
                </div>

                <div class="card mt-3">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-info-circle me-2"></i>How to Test
                        </h5>
                    </div>
                    <div class="card-body">
                        <ol class="small">
                            <li>Check that SignalR shows "Connected"</li>
                            <li>Click any notification button</li>
                            <li>Watch for the notification bell badge</li>
                            <li>Look for toast notification (top-right)</li>
                            <li>Click the notification bell to see dropdown</li>
                            <li>Check browser console for any errors</li>
                        </ol>
                    </div>
                </div>

                <!-- Quick Links -->
                <div class="card mt-3">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-external-link-alt me-2"></i>Quick Links
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <a href="/Notifications/GetRecent" class="btn btn-outline-primary btn-sm" target="_blank">
                                <i class="fas fa-code me-1"></i>MVC: Get Notifications
                            </a>
                            <a href="/Notifications/GetUnreadCount" class="btn btn-outline-success btn-sm" target="_blank">
                                <i class="fas fa-hashtag me-1"></i>MVC: Unread Count
                            </a>
                            <a href="/hangfire" class="btn btn-outline-info btn-sm" target="_blank">
                                <i class="fas fa-cogs me-1"></i>Hangfire Dashboard
                            </a>
                            <a href="/Notifications" class="btn btn-outline-secondary btn-sm" target="_blank">
                                <i class="fas fa-list me-1"></i>All Notifications
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Debug Information -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-terminal me-2"></i>Debug Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>MVC Endpoints:</h6>
                                <ul class="list-unstyled small">
                                    <li><code>GET /Notifications/GetRecent</code> - Get notifications</li>
                                    <li><code>GET /Notifications/GetUnreadCount</code> - Get unread count</li>
                                    <li><code>POST /Notifications/MarkAsRead</code> - Mark as read</li>
                                    <li><code>POST /Notifications/MarkAllAsRead</code> - Mark all as read</li>
                                    <li><code>POST /Notifications/Delete</code> - Delete notification</li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h6>SignalR Hub:</h6>
                                <ul class="list-unstyled small">
                                    <li><code>/notificationHub</code> - SignalR connection</li>
                                    <li><code>ReceiveNotification</code> - Incoming notifications</li>
                                    <li><code>UnreadCountUpdated</code> - Badge updates</li>
                                </ul>
                            </div>
                        </div>
                        
                        <div class="mt-3">
                            <h6>Expected Behavior:</h6>
                            <div class="row small">
                                <div class="col-md-6">
                                    <ul class="list-unstyled">
                                        <li>✅ Bell shows red badge after sending notification</li>
                                        <li>✅ Toast appears in top-right corner</li>
                                        <li>✅ Success message appears at page top</li>
                                    </ul>
                                </div>
                                <div class="col-md-6">
                                    <ul class="list-unstyled">
                                        <li>✅ Console shows SignalR connection</li>
                                        <li>✅ MVC endpoints return JSON data</li>
                                        <li>✅ No JavaScript errors in console</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mt-3">
                            <h6>Current Status:</h6>
                            <div id="debug-output" class="bg-light p-3 rounded small">
                                <em>Click "Debug Info" button to see current status...</em>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function checkConnection() {
            const statusDisplay = document.getElementById('connection-status-display');
            
            if (typeof notificationManager !== 'undefined' && notificationManager.isConnected) {
                statusDisplay.textContent = 'Connected';
                statusDisplay.className = 'badge bg-success';
            } else {
                statusDisplay.textContent = 'Disconnected';
                statusDisplay.className = 'badge bg-danger';
            }
        }

        // FIXED: Test MVC endpoint instead of API
        async function testMvcEndpoint() {
            try {
                const response = await fetch('/Notifications/GetUnreadCount');
                const data = await response.json();
                
                if (response.ok) {
                    alert(`✅ MVC Endpoint Test Successful!\n\nUnread count: ${data.count}\nResponse time: ${Date.now()} ms\nStatus: ${response.status}`);
                } else {
                    alert(`❌ MVC Endpoint Test Failed!\n\nStatus: ${response.status}\nError: ${response.statusText}`);
                }
            } catch (error) {
                alert(`🚨 MVC Endpoint Test Error!\n\nError: ${error.message}\n\nCheck if:\n- Server is running\n- You are logged in\n- Network connection is working`);
                console.error('MVC Endpoint Test Error:', error);
            }
        }

        function showDebugInfo() {
            const output = document.getElementById('debug-output');
            const info = {
                'SignalR Connected': notificationManager ? notificationManager.isConnected : 'Manager not loaded',
                'SignalR Manager': typeof notificationManager !== 'undefined' ? 'Loaded ✅' : 'Not loaded ❌',
                'Current Time': new Date().toLocaleString(),
                'Page URL': window.location.href,
                'User Agent': navigator.userAgent.substring(0, 60) + '...',
                'Console Errors': 'Check browser console (F12) for errors',
                'Local Storage': typeof(Storage) !== "undefined" ? 'Supported ✅' : 'Not supported ❌',
                'Cookies Enabled': navigator.cookieEnabled ? 'Yes ✅' : 'No ❌'
            };

            let html = '<div class="row">';
            for (const [key, value] of Object.entries(info)) {
                html += `
                    <div class="col-md-6 mb-2">
                        <strong>${key}:</strong> <span class="text-muted">${value}</span>
                    </div>
                `;
            }
            html += '</div>';
            
            // Add network test
            html += `
                <div class="mt-3">
                    <strong>Network Test:</strong> 
                    <button class="btn btn-sm btn-outline-primary ms-2" onclick="testNetworkConnection()">
                        Test MVC Connection
                    </button>
                </div>
            `;
            
            output.innerHTML = html;
        }

        async function testNetworkConnection() {
            try {
                const start = Date.now();
                // FIXED: Test MVC endpoint
                const response = await fetch('/Notifications/GetUnreadCount');
                const end = Date.now();
                const time = end - start;
                
                if (response.ok) {
                    document.querySelector('#debug-output').innerHTML += `
                        <div class="alert alert-success mt-2 p-2">
                            ✅ MVC network test successful! Response time: ${time}ms
                        </div>
                    `;
                } else {
                    document.querySelector('#debug-output').innerHTML += `
                        <div class="alert alert-danger mt-2 p-2">
                            ❌ MVC network test failed! Status: ${response.status}
                        </div>
                    `;
                }
            } catch (error) {
                document.querySelector('#debug-output').innerHTML += `
                    <div class="alert alert-danger mt-2 p-2">
                        🚨 Network error: ${error.message}
                    </div>
                `;
            }
        }

        // Check status when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 NotificationTest page loaded');
            
            setTimeout(checkConnection, 1000); // Wait a second for SignalR to connect
            
            // Check every 5 seconds
            setInterval(checkConnection, 5000);
            
            // Log notification manager status
            console.log('NotificationManager status:', typeof notificationManager !== 'undefined' ? 'Loaded' : 'Not loaded');
        });

        // Listen for notification events and enhance logging
        if (typeof notificationManager !== 'undefined') {
            // Override the showToast method to also log to console
            const originalShowToast = notificationManager.showToast;
            if (originalShowToast) {
                notificationManager.showToast = function(notification) {
                    console.log('📩 Notification received:', notification);
                    console.log('📩 Notification details:', {
                        title: notification.title,
                        message: notification.message,
                        type: notification.type,
                        timestamp: new Date().toLocaleString()
                    });
                    
                    // Call original method
                    originalShowToast.call(this, notification);
                };
            }
        }

        // Add form submission logging
        document.querySelectorAll('form').forEach(form => {
            form.addEventListener('submit', function(e) {
                const formData = new FormData(this);
                const type = formData.get('type');
                console.log(`🔔 Sending test notification: ${type}`);
            });
        });
    </script>
}