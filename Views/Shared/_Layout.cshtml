<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Task Manager</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <style>
        :root {
            --primary-color: #3B82F6;
            --primary-dark: #1E40AF;
            --success-color: #10B981;
            --warning-color: #F59E0B;
            --danger-color: #EF4444;
            --info-color: #06B6D4;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8fafc;
        }
        
        .navbar-brand {
            font-weight: 700;
            color: var(--primary-color) !important;
            font-size: 1.5rem;
        }
        
        .navbar {
            background-color: white !important;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .nav-link {
            font-weight: 500;
            color: #64748b !important;
            transition: color 0.3s ease;
        }
        
        .nav-link:hover,
        .nav-link.active {
            color: var(--primary-color) !important;
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            border-radius: 8px;
            font-weight: 600;
            padding: 8px 16px;
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }
        
        .btn-outline-primary {
            color: var(--primary-color);
            border-color: var(--primary-color);
            border-radius: 8px;
            font-weight: 600;
        }
        
        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .card {
            border-radius: 12px;
            border: none;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
        }
        
        .card:hover {
            box-shadow: 0 4px 20px rgba(0,0,0,0.12);
            transform: translateY(-2px);
        }
        
        .alert {
            border-radius: 12px;
            border: none;
            margin-bottom: 1.5rem;
        }
        
        .alert-success {
            background-color: #f0fdf4;
            color: #166534;
            border-left: 4px solid var(--success-color);
        }
        
        .alert-danger {
            background-color: #fef2f2;
            color: #dc2626;
            border-left: 4px solid var(--danger-color);
        }
        
        .alert-info {
            background-color: #f0f9ff;
            color: #0c4a6e;
            border-left: 4px solid var(--info-color);
        }
        
        .alert-warning {
            background-color: #fffbeb;
            color: #92400e;
            border-left: 4px solid var(--warning-color);
        }
        
        .footer {
            background-color: white;
            border-top: 1px solid #e2e8f0;
            padding: 1.5rem 0;
            margin-top: 3rem;
            color: #64748b;
        }
        
        .container {
            max-width: 1200px;
        }
        
        main {
            min-height: calc(100vh - 200px);
        }
        
        /* Loading spinner for better UX */
        .btn.loading {
            position: relative;
            color: transparent;
        }
        
        .btn.loading::after {
            content: "";
            position: absolute;
            width: 16px;
            height: 16px;
            top: 50%;
            left: 50%;
            margin-left: -8px;
            margin-top: -8px;
            border: 2px solid #ffffff;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s linear infinite;
        }
        
        @@keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }
        
        /* Responsive improvements */
       @@media (max-width: 768px) {
            .container {
                padding-left: 15px;
                padding-right: 15px;
            }
            
            .navbar-brand {
                font-size: 1.3rem;
            }
        }

        /* Notification Bell Styles */
        .notification-bell {
            position: relative;
            color: #64748b;
            transition: all 0.3s ease;
            font-size: 1.1rem;
            padding: 0.5rem;
            border-radius: 8px;
        }

        .notification-bell:hover {
            color: var(--primary-color);
            background-color: rgba(59, 130, 246, 0.1);
            text-decoration: none;
        }

        .notification-badge {
            font-size: 0.7rem;
            font-weight: 600;
            min-width: 18px;
            height: 18px;
            line-height: 18px;
            text-align: center;
            border-radius: 9px;
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .notification-dropdown {
            border: none;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
            border-radius: 12px;
            overflow: hidden;
            margin-top: 0.5rem;
        }

        /* Notification Dropdown Items */
        .notification-item {
            transition: all 0.2s ease;
            cursor: pointer;
            position: relative;
        }

        .notification-item:hover {
            background-color: #f8fafc;
        }

        .notification-item.unread {
            background: linear-gradient(135deg, #eff6ff 0%, #f0f9ff 100%);
            border-left: 3px solid var(--primary-color);
        }

        .notification-item.unread::before {
            content: '';
            position: absolute;
            top: 50%;
            right: 1rem;
            width: 8px;
            height: 8px;
            background: var(--primary-color);
            border-radius: 50%;
            transform: translateY(-50%);
        }

        .notification-icon-wrapper {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #f8fafc;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }

        .notification-icon {
            font-size: 1.1rem;
        }

        .notification-title {
            font-size: 0.9rem;
            color: #1f2937;
            margin: 0;
        }

        .notification-message {
            font-size: 0.85rem;
            color: #6b7280;
            line-height: 1.4;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .notification-time {
            font-size: 0.75rem;
            color: #9ca3af;
        }

        .notification-actions {
            opacity: 0;
            transition: opacity 0.2s ease;
        }

        .notification-item:hover .notification-actions {
            opacity: 1;
        }

        .notification-actions .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }

        /* Enhanced Toast Notification Styles */
        .notification-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1060;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            border-left: 4px solid var(--primary-color);
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            max-width: 400px;
            min-width: 350px;
            overflow: hidden;
            border: 1px solid #e5e7eb;
        }

        .notification-toast.show {
            opacity: 1;
            transform: translateX(0);
        }

        .notification-toast::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, var(--primary-color), var(--info-color));
        }

        .notification-toast.toast-warning {
            border-left-color: var(--warning-color);
        }
        .notification-toast.toast-warning::before {
            background: linear-gradient(90deg, var(--warning-color), #fbbf24);
        }

        .notification-toast.toast-danger {
            border-left-color: var(--danger-color);
        }
        .notification-toast.toast-danger::before {
            background: linear-gradient(90deg, var(--danger-color), #f87171);
        }

        .notification-toast.toast-success {
            border-left-color: var(--success-color);
        }
        .notification-toast.toast-success::before {
            background: linear-gradient(90deg, var(--success-color), #34d399);
        }

        .notification-toast.toast-info {
            border-left-color: var(--info-color);
        }
        .notification-toast.toast-info::before {
            background: linear-gradient(90deg, var(--info-color), #22d3ee);
        }

        .notification-toast-content {
            padding: 1.25rem;
            display: flex;
            align-items: flex-start;
            gap: 1rem;
        }

        .notification-toast-icon {
            font-size: 1.5rem;
            margin-top: 0.1rem;
            flex-shrink: 0;
        }

        .notification-toast-text {
            flex: 1;
            min-width: 0;
        }

        .notification-toast-title {
            margin: 0 0 0.5rem 0;
            font-size: 1rem;
            font-weight: 600;
            color: #1f2937;
            line-height: 1.3;
        }

        .notification-toast-message {
            margin: 0;
            font-size: 0.9rem;
            color: #6b7280;
            line-height: 1.4;
        }

        .notification-toast-close {
            background: none;
            border: none;
            color: #9ca3af;
            cursor: pointer;
            padding: 0;
            font-size: 1.1rem;
            width: 28px;
            height: 28px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            flex-shrink: 0;
        }

        .notification-toast-close:hover {
            background: #f3f4f6;
            color: #6b7280;
        }

        .notification-toast-progress {
            position: absolute;
            bottom: 0;
            left: 0;
            height: 3px;
            background: rgba(59, 130, 246, 0.3);
            transition: width linear;
        }

        /* Toast container for multiple notifications */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1060;
            display: flex;
            flex-direction: column;
            gap: 10px;
            pointer-events: none;
        }

        .toast-container .notification-toast {
            position: relative;
            top: 0;
            right: 0;
            pointer-events: auto;
        }

        @@media (max-width: 768px) {
            .notification-toast {
                right: 10px;
                left: 10px;
                max-width: none;
                min-width: auto;
            }
            
            .toast-container {
                right: 10px;
                left: 10px;
            }
        }
    </style>
</head>
<body>
    <!-- Toast Container -->
    <div id="toast-container" class="toast-container"></div>

    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">
                    <i class="fas fa-tasks me-2"></i>Task Manager
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav flex-grow-1">
                        @if (User.Identity != null && User.Identity.IsAuthenticated)
{
    <li class="nav-item">
        <a class="nav-link @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Dashboard" ? "active" : "")" 
           asp-area="" asp-controller="Dashboard" asp-action="Index">
            <i class="fas fa-chart-pie me-1"></i>Dashboard
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Tasks" ? "active" : "")" 
           asp-area="" asp-controller="Tasks" asp-action="Index">
            <i class="fas fa-list-check me-1"></i>Tasks
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Projects" ? "active" : "")" 
           asp-area="" asp-controller="Projects" asp-action="Index">
            <i class="fas fa-folder me-1"></i>Projects
        </a>
    </li>
<li class="nav-item">
    <a class="nav-link @(ViewContext.RouteData.Values["Controller"]?.ToString() == "ElasticsearchDebug" ? "active" : "")" 
       asp-area="" asp-controller="ElasticsearchDebug" asp-action="Index">
        <i class="fas fa-bug me-1"></i>Debug ES
    </a>
</li>
    <!-- ADD THIS NEW SEARCH NAV ITEM -->
    <li class="nav-item">
        <a class="nav-link @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Search" ? "active" : "")" 
           asp-area="" asp-controller="Search" asp-action="Index">
            <i class="fas fa-search me-1"></i>Search
        </a>
    </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Home" ? "active" : "")" 
                                   asp-area="" asp-controller="Home" asp-action="Index">
                                    <i class="fas fa-home me-1"></i>Home
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" asp-area="" asp-controller="Home" asp-action="About">
                                    <i class="fas fa-info-circle me-1"></i>About
                                </a>
                            </li>
                        }
                    </ul>
                    
                    <ul class="navbar-nav">
                        @if (User.Identity != null && User.Identity.IsAuthenticated)
                        {
                            <!-- Notification Bell -->
                            <li class="nav-item dropdown me-2">
                                <a class="nav-link notification-bell position-relative" href="#" id="notificationDropdown" 
                                   role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-bell"></i>
                                    <span id="notification-badge" class="notification-badge position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="display: none;">
                                        0
                                    </span>
                                </a>
                                <div class="dropdown-menu dropdown-menu-end notification-dropdown" aria-labelledby="notificationDropdown" style="width: 350px;">
                                    <div class="notification-header d-flex justify-content-between align-items-center p-3 bg-light border-bottom">
                                        <h6 class="mb-0 fw-bold">Notifications</h6>
                                        <small id="connection-status" class="connection-status badge bg-secondary">Connecting...</small>
                                    </div>
                                    <div id="notification-list" class="notification-list" style="max-height: 300px; overflow-y: auto;">
                                        <div class="notification-empty text-center py-4 text-muted">
                                            <i class="fas fa-bell-slash fa-2x mb-2 d-block"></i>
                                            <p class="mb-0">No notifications yet</p>
                                        </div>
                                    </div>
                                    <div class="notification-footer p-2 bg-light border-top text-center">
                                        <button class="btn btn-sm btn-outline-primary me-2" onclick="notificationManager && notificationManager.markAllAsRead()">
                                            Mark All Read
                                        </button>
                                        <a href="/NotificationTest" class="btn btn-sm btn-primary">Test</a>
                                    </div>
                                </div>
                            </li>

                            <!-- User Dropdown -->
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-user-circle me-1"></i>
                                    @if (User.Identity.Name != null)
                                    {
                                        @User.Identity.Name.Split('@')[0]
                                    }
                                    else
                                    {
                                        <span>Account</span>
                                    }
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                                    <li>
                                        <a class="dropdown-item" href="/NotificationTest">
                                            <i class="fas fa-bell me-2"></i>Test Notifications
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item" asp-area="" asp-controller="Account" asp-action="Profile">
                                            <i class="fas fa-user me-2"></i>Profile
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item" asp-area="" asp-controller="Account" asp-action="Settings">
                                            <i class="fas fa-cog me-2"></i>Settings
                                        </a>
                                    </li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <form asp-area="" asp-controller="Account" asp-action="Logout" method="post" class="d-inline">
                                            <button type="submit" class="dropdown-item text-danger">
                                                <i class="fas fa-sign-out-alt me-2"></i>Logout
                                            </button>
                                        </form>
                                    </li>
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link" asp-area="" asp-controller="Account" asp-action="Login">
                                    <i class="fas fa-sign-in-alt me-1"></i>Login
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="btn btn-primary ms-2" asp-area="" asp-controller="Account" asp-action="Register">
                                    <i class="fas fa-user-plus me-1"></i>Sign Up
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    
    <div class="container">
        <main role="main" class="pb-3">
            <!-- Success/Error/Info/Warning Messages -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            
            @if (TempData["InfoMessage"] != null)
            {
                <div class="alert alert-info alert-dismissible fade show" role="alert">
                    <i class="fas fa-info-circle me-2"></i>@TempData["InfoMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            
            @if (TempData["WarningMessage"] != null)
            {
                <div class="alert alert-warning alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>@TempData["WarningMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            
            @RenderBody()
        </main>
    </div>

    <footer class="footer text-muted">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <p class="mb-0">&copy; @DateTime.Now.Year - Task Manager</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <a asp-area="" asp-controller="Home" asp-action="Privacy" class="text-decoration-none me-3">Privacy</a>
                    <a asp-area="" asp-controller="Home" asp-action="Terms" class="text-decoration-none">Terms</a>
                </div>
            </div>
        </div>
    </footer>
    
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- SignalR and Enhanced Notifications -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        // FIXED: Enhanced notification system for MVC routes
        let notificationManager = {
            connection: null,
            isConnected: false,
            toastContainer: null,
            toastCounter: 0,
            
            init: async function() {
                try {
                    // Get or create toast container
                    this.toastContainer = document.getElementById('toast-container');
                    
                    this.connection = new signalR.HubConnectionBuilder()
                        .withUrl("/notificationHub")
                        .withAutomaticReconnect()
                        .build();

                    this.connection.on("ReceiveNotification", (notification) => {
                        console.log('📩 Notification received:', notification);
                        this.showEnhancedToast(notification);
                        this.addToDropdown(notification);
                        this.updateBadge();
                    });

                    this.connection.on("UnreadCountUpdated", (count) => {
                        this.updateBadge(count);
                    });

                    await this.connection.start();
                    this.isConnected = true;
                    console.log("✅ SignalR Connected!");
                    
                    const statusElement = document.getElementById('connection-status');
                    if (statusElement) {
                        statusElement.textContent = 'Connected';
                        statusElement.className = 'badge bg-success';
                    }
                    
                    // Load existing notifications and unread count
                    await this.loadNotifications();
                    await this.updateBadge();
                } catch (error) {
                    console.error("❌ SignalR connection error:", error);
                    const statusElement = document.getElementById('connection-status');
                    if (statusElement) {
                        statusElement.textContent = 'Failed';
                        statusElement.className = 'badge bg-danger';
                    }
                }
            },

            loadNotifications: async function() {
                try {
                    // FIXED: Use MVC route instead of API route
                    const response = await fetch('/Notifications/GetRecent');
                    if (response.ok) {
                        const notifications = await response.json();
                        this.populateDropdown(notifications);
                    }
                } catch (error) {
                    console.error('Failed to load notifications:', error);
                }
            },

            populateDropdown: function(notifications) {
                const notificationList = document.getElementById('notification-list');
                if (!notificationList) return;

                if (notifications.length === 0) {
                    notificationList.innerHTML = `
                        <div class="notification-empty text-center py-4 text-muted">
                            <i class="fas fa-bell-slash fa-2x mb-2 d-block"></i>
                            <p class="mb-0">No notifications yet</p>
                        </div>
                    `;
                    return;
                }

                let html = '';
                notifications.forEach(notification => {
                    html += this.createNotificationItem(notification);
                });
                notificationList.innerHTML = html;
            },

            addToDropdown: function(notification) {
                const notificationList = document.getElementById('notification-list');
                if (!notificationList) return;

                // Remove empty state if it exists
                const emptyState = notificationList.querySelector('.notification-empty');
                if (emptyState) {
                    emptyState.remove();
                }

                // Add new notification at the top
                const notificationHtml = this.createNotificationItem(notification);
                notificationList.insertAdjacentHTML('afterbegin', notificationHtml);

                // Keep only the latest 10 notifications
                const items = notificationList.children;
                while (items.length > 10) {
                    notificationList.removeChild(items[items.length - 1]);
                }
            },

            createNotificationItem: function(notification) {
                const typeConfig = this.getNotificationTypeConfig(notification.type);
                const timeAgo = this.getTimeAgo(new Date(notification.createdAt));
                const isUnread = !notification.isRead;

                return `
                    <div class="notification-item ${isUnread ? 'unread' : 'read'}" data-notification-id="${notification.id}">
                        <div class="notification-item-content p-3 border-bottom">
                            <div class="d-flex gap-3">
                                <div class="notification-icon-wrapper">
                                    <div class="notification-icon ${typeConfig.iconColor}">
                                        <i class="${typeConfig.icon}"></i>
                                    </div>
                                </div>
                                <div class="flex-grow-1 min-width-0">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <h6 class="notification-title mb-1 fw-semibold">${this.escapeHtml(notification.title)}</h6>
                                        <div class="notification-actions">
                                            ${!isUnread ? '' : `
                                                <button class="btn btn-sm btn-outline-primary me-1" onclick="notificationManager.markAsRead(${notification.id})">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                            `}
                                            <button class="btn btn-sm btn-outline-danger" onclick="notificationManager.deleteNotification(${notification.id})">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <p class="notification-message mb-1 text-muted small">${this.escapeHtml(notification.message)}</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="notification-time text-muted">
                                            <i class="fas fa-clock me-1"></i>${timeAgo}
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            },

            markAsRead: async function(notificationId) {
                try {
                    // FIXED: Use MVC route with CSRF token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || 
                                 document.querySelector('meta[name="__RequestVerificationToken"]')?.getAttribute('content') ||
                                 '';
                    
                    const response = await fetch('/Notifications/MarkAsRead', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: new URLSearchParams({
                            'id': notificationId,
                            '__RequestVerificationToken': token
                        })
                    });

                    if (response.ok) {
                        // Update UI
                        const notificationElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
                        if (notificationElement) {
                            notificationElement.classList.remove('unread');
                            notificationElement.classList.add('read');
                            
                            // Remove the mark as read button
                            const markReadBtn = notificationElement.querySelector('.btn-outline-primary');
                            if (markReadBtn) {
                                markReadBtn.remove();
                            }
                        }
                        
                        // Update badge
                        await this.updateBadge();
                    }
                } catch (error) {
                    console.error('Failed to mark notification as read:', error);
                }
            },

            deleteNotification: async function(notificationId) {
                if (!confirm('Are you sure you want to delete this notification?')) {
                    return;
                }

                try {
                    // FIXED: Use MVC route with CSRF token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || 
                                 document.querySelector('meta[name="__RequestVerificationToken"]')?.getAttribute('content') ||
                                 '';
                    
                    const response = await fetch('/Notifications/Delete', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: new URLSearchParams({
                            'id': notificationId,
                            '__RequestVerificationToken': token
                        })
                    });

                    if (response.ok) {
                        // Remove from UI
                        const notificationElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
                        if (notificationElement) {
                            notificationElement.remove();
                        }

                        // Check if dropdown is empty
                        const notificationList = document.getElementById('notification-list');
                        if (notificationList && notificationList.children.length === 0) {
                            notificationList.innerHTML = `
                                <div class="notification-empty text-center py-4 text-muted">
                                    <i class="fas fa-bell-slash fa-2x mb-2 d-block"></i>
                                    <p class="mb-0">No notifications yet</p>
                                </div>
                            `;
                        }

                        // Update badge
                        await this.updateBadge();
                    }
                } catch (error) {
                    console.error('Failed to delete notification:', error);
                }
            },

            updateBadge: async function(count = null) {
                if (count === null) {
                    try {
                        // FIXED: Use MVC route
                        const response = await fetch('/Notifications/GetUnreadCount');
                        if (response.ok) {
                            const data = await response.json();
                            count = data.count;
                        }
                    } catch (error) {
                        console.error('Failed to get unread count:', error);
                        return;
                    }
                }

                const badge = document.getElementById('notification-badge');
                if (badge) {
                    if (count > 0) {
                        badge.textContent = count > 99 ? '99+' : count;
                        badge.style.display = 'inline-block';
                    } else {
                        badge.style.display = 'none';
                    }
                }
            },

            markAllAsRead: async function() {
                try {
                    // FIXED: Use MVC route with CSRF token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || 
                                 document.querySelector('meta[name="__RequestVerificationToken"]')?.getAttribute('content') ||
                                 '';
                    
                    const response = await fetch('/Notifications/MarkAllAsRead', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: new URLSearchParams({
                            '__RequestVerificationToken': token
                        })
                    });
                    
                    if (response.ok) {
                        // Update all notification items in dropdown
                        document.querySelectorAll('.notification-item.unread').forEach(item => {
                            item.classList.remove('unread');
                            item.classList.add('read');
                            const markReadBtn = item.querySelector('.btn-outline-primary');
                            if (markReadBtn) {
                                markReadBtn.remove();
                            }
                        });
                        
                        this.updateBadge(0);
                    }
                } catch (error) {
                    console.error('Failed to mark all as read:', error);
                }
            },

            getTimeAgo: function(date) {
                const now = new Date();
                const diffInMinutes = Math.floor((now - date) / (1000 * 60));
                
                if (diffInMinutes < 1) return 'Just now';
                if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
                
                const diffInHours = Math.floor(diffInMinutes / 60);
                if (diffInHours < 24) return `${diffInHours}h ago`;
                
                const diffInDays = Math.floor(diffInHours / 24);
                if (diffInDays < 7) return `${diffInDays}d ago`;
                
                return date.toLocaleDateString();
            },

            showEnhancedToast: function(notification) {
                this.toastCounter++;
                const toastId = 'toast-' + this.toastCounter;
                
                // Get notification type styling
                const typeConfig = this.getNotificationTypeConfig(notification.type);
                
                // Create toast element
                const toast = document.createElement('div');
                toast.id = toastId;
                toast.className = `notification-toast ${typeConfig.class}`;
                
                toast.innerHTML = `
                    <div class="notification-toast-content">
                        <div class="notification-toast-icon ${typeConfig.iconColor}">
                            <i class="${typeConfig.icon}"></i>
                        </div>
                        <div class="notification-toast-text">
                            <div class="notification-toast-title">${this.escapeHtml(notification.title)}</div>
                            <div class="notification-toast-message">${this.escapeHtml(notification.message)}</div>
                        </div>
                        <button class="notification-toast-close" onclick="notificationManager.removeToast('${toastId}')">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="notification-toast-progress" id="${toastId}-progress"></div>
                `;

                // Add to container
                this.toastContainer.appendChild(toast);
                
                // Show toast with animation
                setTimeout(() => {
                    toast.classList.add('show');
                }, 100);

                // UPDATED: Longer duration for toasts (15 seconds instead of 8)
                const duration = 15000; // 15 seconds
                
                // Start progress bar animation
                const progressBar = document.getElementById(toastId + '-progress');
                let width = 100;
                const interval = 50;
                const decrement = (100 / duration) * interval;

                const progressInterval = setInterval(() => {
                    width -= decrement;
                    if (progressBar) {
                        progressBar.style.width = width + '%';
                    }
                    
                    if (width <= 0) {
                        clearInterval(progressInterval);
                        this.removeToast(toastId);
                    }
                }, interval);

                // Store interval ID for cleanup
                toast.dataset.progressInterval = progressInterval;

                // Add click to dismiss functionality
                toast.addEventListener('click', () => {
                    this.removeToast(toastId);
                });

                // Play notification sound (optional)
                this.playNotificationSound();
            },

            removeToast: function(toastId) {
                const toast = document.getElementById(toastId);
                if (toast) {
                    // Clear progress interval
                    if (toast.dataset.progressInterval) {
                        clearInterval(parseInt(toast.dataset.progressInterval));
                    }
                    
                    // Hide with animation
                    toast.classList.remove('show');
                    
                    // Remove from DOM after animation
                    setTimeout(() => {
                        if (toast.parentNode) {
                            toast.parentNode.removeChild(toast);
                        }
                    }, 400);
                }
            },

            getNotificationTypeConfig: function(type) {
                const configs = {
                    'TaskDue': {
                        class: 'toast-warning',
                        icon: 'fas fa-clock',
                        iconColor: 'text-warning'
                    },
                    'TaskOverdue': {
                        class: 'toast-danger',
                        icon: 'fas fa-exclamation-triangle',
                        iconColor: 'text-danger'
                    },
                    'TaskCompleted': {
                        class: 'toast-success',
                        icon: 'fas fa-check-circle',
                        iconColor: 'text-success'
                    },
                    'TaskCreated': {
                        class: 'toast-info',
                        icon: 'fas fa-plus-circle',
                        iconColor: 'text-info'
                    },
                    'ProjectCreated': {
                        class: 'toast-info',
                        icon: 'fas fa-folder-plus',
                        iconColor: 'text-info'
                    },
                    'Reminder': {
                        class: 'toast-primary',
                        icon: 'fas fa-bell',
                        iconColor: 'text-primary'
                    },
                    'System': {
                        class: 'toast-secondary',
                        icon: 'fas fa-cog',
                        iconColor: 'text-secondary'
                    }
                };
                
                return configs[type] || configs['System'];
            },

            playNotificationSound: function() {
                // Create a subtle notification sound
                try {
                    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                    const oscillator = audioContext.createOscillator();
                    const gainNode = audioContext.createGain();
                    
                    oscillator.connect(gainNode);
                    gainNode.connect(audioContext.destination);
                    
                    oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                    oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);
                    
                    gainNode.gain.setValueAtTime(0, audioContext.currentTime);
                    gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.05);
                    gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.2);
                    
                    oscillator.start(audioContext.currentTime);
                    oscillator.stop(audioContext.currentTime + 0.2);
                } catch (error) {
                    // Sound failed, ignore
                }
            },

            escapeHtml: function(text) {
                if (!text) return '';
                const map = {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#039;'
                };
                return text.toString().replace(/[&<>"']/g, m => map[m]);
            },

            // Maintain compatibility with old method name
            showToast: function(notification) {
                this.showEnhancedToast(notification);
            },

            // NEW: Check for recent notifications (for form submissions)
            checkForRecentNotifications: async function() {
                try {
                    const response = await fetch('/Notifications/GetRecent');
                    if (response.ok) {
                        const notifications = await response.json();
                        
                        // Show toast for very recent notifications (last 30 seconds)
                        const now = new Date();
                        const recentNotifications = notifications.filter(n => {
                            const notificationTime = new Date(n.createdAt);
                            const timeDiff = (now - notificationTime) / 1000; // seconds
                            return timeDiff <= 30 && !n.isRead; // Recent and unread
                        });

                        // Show toasts for recent notifications
                        recentNotifications.forEach((notification, index) => {
                            setTimeout(() => {
                                console.log('📩 Showing recent notification:', notification);
                                this.showEnhancedToast(notification);
                            }, index * 500); // Stagger multiple notifications
                        });

                        if (recentNotifications.length > 0) {
                            this.updateBadge();
                        }
                    }
                } catch (error) {
                    console.error('Failed to check for recent notifications:', error);
                }
            }
        };

        // Add dropdown refresh when opened
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Enhanced Notification System Loading...');
            
            // Add CSRF token to head if not present
            if (!document.querySelector('meta[name="__RequestVerificationToken"]')) {
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                if (token) {
                    const meta = document.createElement('meta');
                    meta.name = '__RequestVerificationToken';
                    meta.content = token;
                    document.head.appendChild(meta);
                }
            }
            
            notificationManager.init();
            
            // NEW: Check for new notifications after page load (for form submissions)
            setTimeout(async () => {
                await notificationManager.checkForRecentNotifications();
            }, 2000); // Wait 2 seconds for SignalR to connect
            
            // Refresh notifications when dropdown is opened
            const notificationDropdown = document.getElementById('notificationDropdown');
            if (notificationDropdown) {
                notificationDropdown.addEventListener('click', function() {
                    // Small delay to ensure dropdown is shown
                    setTimeout(() => {
                        notificationManager.loadNotifications();
                    }, 100);
                });
            }
        });

        // Auto-hide alerts after 5 seconds
        $(document).ready(function() {
            setTimeout(function() {
                $('.alert').fadeOut('slow');
            }, 5000);
            
            // Add loading state to buttons on form submit
            $('form').on('submit', function() {
                $(this).find('button[type="submit"]').addClass('loading').prop('disabled', true);
            });
        });
    </script>
    
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>