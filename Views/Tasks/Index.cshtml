@model TaskManager.Web.ViewModels.Tasks.TaskListViewModel
@using TaskStatus = TaskManager.Web.Models.TaskStatus
@using TaskManager.Web.Models
@{
    ViewData["Title"] = "Tasks";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-0">
            <i class="fas fa-list-check me-2 text-primary"></i>My Tasks
        </h1>
        <p class="text-muted mb-0">Manage and track your tasks</p>
    </div>
   <a asp-action="Create" class="btn btn-primary">
    <i class="fas fa-plus me-2"></i>New Task
</a>
</div>

<!-- Filter Bar -->
<div class="card mb-4">
    <div class="card-body">
        <form method="get" class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Search</label>
                <input type="text" name="search" value="@Model.SearchTerm" class="form-control" placeholder="Search tasks...">
            </div>
            <div class="col-md-2">
                <label class="form-label">Status</label>
                <select name="status" class="form-select">
                    <option value="">All Status</option>
                    @foreach (TaskStatus status in Enum.GetValues<TaskStatus>())
                    {
                        <option value="@status" selected="@(Model.SelectedStatus == status.ToString())">@status</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Priority</label>
                <select name="priority" class="form-select">
                    <option value="">All Priorities</option>
                    @foreach (TaskPriority priority in Enum.GetValues<TaskPriority>())
                    {
                        <option value="@priority" selected="@(Model.SelectedPriority == priority.ToString())">@priority</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Project</label>
                <select name="projectId" class="form-select">
                    <option value="">All Projects</option>
                    @foreach (var project in Model.Projects)
                    {
                        <option value="@project.Id" selected="@(Model.SelectedProjectId == project.Id)">@project.Name</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">&nbsp;</label>
                <div>
                    <button type="submit" class="btn btn-outline-primary w-100">
                        <i class="fas fa-search me-1"></i>Filter
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Tasks Grid -->
@if (Model.Tasks.Any())
{
    <div class="row" id="tasksContainer">
        @foreach (var task in Model.Tasks)
        {
            <div class="col-lg-6 mb-3" id="task-card-@task.Id">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="card-title mb-0">
                                <a asp-action="Details" asp-route-id="@task.Id" class="text-decoration-none">
                                    @task.Title
                                </a>
                            </h5>
                            <div class="d-flex gap-1">
                                <span class="@task.PriorityBadgeClass">@task.Priority</span>
                                <span class="@task.StatusBadgeClass">@task.Status</span>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(task.Description))
                        {
                            <p class="card-text text-muted">
                                @(task.Description.Length > 100 ? task.Description.Substring(0, 100) + "..." : task.Description)
                            </p>
                        }
                        
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="text-muted small">
                                @if (task.Project != null)
                                {
                                    <span class="me-3">
                                        <i class="fas fa-folder me-1"></i>@task.Project.Name
                                    </span>
                                }
                                @if (task.DueDate.HasValue)
                                {
                                    <span class="@(task.IsOverdue ? "text-danger" : "")">
                                        <i class="fas fa-calendar me-1"></i>@task.DueDate.Value.ToString("MMM dd, yyyy")
                                    </span>
                                }
                            </div>
                            <div class="btn-group" role="group">
                                <a asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-outline-secondary">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button type="button" class="btn btn-sm btn-outline-danger" 
                                        onclick="confirmDelete(@task.Id, '@task.Title')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="text-center py-5">
        <i class="fas fa-inbox fa-4x text-muted mb-3"></i>
        <h4 class="text-muted">No tasks found</h4>
        <p class="text-muted">Create your first task to get started!</p>
        <button class="btn btn-primary" onclick="showQuickTaskModal()">
            <i class="fas fa-plus me-2"></i>Create Task
        </button>
    </div>
}

<!-- Quick Task Modal -->
<div class="modal fade" id="quickTaskModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="quickTaskForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Title</label>
                        <input type="text" name="title" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea name="description" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label">Priority</label>
                            <select name="priority" class="form-select">
                                <option value="Low">Low</option>
                                <option value="Medium" selected>Medium</option>
                                <option value="High">High</option>
                                <option value="Critical">Critical</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Status</label>
                            <select name="status" class="form-select">
                                <option value="ToDo" selected>To Do</option>
                                <option value="InProgress">In Progress</option>
                                <option value="Completed">Completed</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label class="form-label">Due Date</label>
                            <input type="date" name="dueDate" class="form-control">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Project</label>
                            <select name="projectId" class="form-select">
                                <option value="">No Project</option>
                                @foreach (var project in Model.Projects)
                                {
                                    <option value="@project.Id">@project.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <span class="spinner-border spinner-border-sm d-none" id="taskSpinner"></span>
                        Create Task
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete "<span id="taskTitle"></span>"?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <span class="spinner-border spinner-border-sm d-none" id="deleteSpinner"></span>
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentTaskId = null;

        // Show Quick Task Modal
        function showQuickTaskModal() {
            new bootstrap.Modal(document.getElementById('quickTaskModal')).show();
        }

        // Confirm Delete Function
        function confirmDelete(taskId, taskTitle) {
            currentTaskId = taskId;
            document.getElementById('taskTitle').textContent = taskTitle;
            new bootstrap.Modal(document.getElementById('deleteModal')).show();
        }

        // Quick Task Form Submission
        document.getElementById('quickTaskForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const submitBtn = e.target.querySelector('button[type="submit"]');
            const spinner = document.getElementById('taskSpinner');
            const formData = new FormData(e.target);
            
            // Show loading state
            submitBtn.disabled = true;
            spinner.classList.remove('d-none');
            
            try {
                const response = await fetch('/Tasks/Create', {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    // Close modal and reset form
                    bootstrap.Modal.getInstance(document.getElementById('quickTaskModal')).hide();
                    e.target.reset();
                    
                    // The SignalR notification will show the success toast
                    // Refresh the page to show the new task
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    const errorText = await response.text();
                    throw new Error(`Failed to create task: ${response.status}`);
                }
            } catch (error) {
                console.error('Error creating task:', error);
                alert('Failed to create task. Please try again.');
            } finally {
                // Reset loading state
                submitBtn.disabled = false;
                spinner.classList.add('d-none');
            }
        });

        // Delete Task AJAX
        document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
            if (!currentTaskId) return;
            
            const deleteBtn = this;
            const spinner = document.getElementById('deleteSpinner');
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            // Show loading state
            deleteBtn.disabled = true;
            spinner.classList.remove('d-none');
            
            try {
                const formData = new FormData();
                formData.append('__RequestVerificationToken', token);
                
                const response = await fetch(`/Tasks/Delete/${currentTaskId}`, {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    // Close modal
                    bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
                    
                    // Remove the task card from DOM with animation
                    const taskCard = document.getElementById(`task-card-${currentTaskId}`);
                    if (taskCard) {
                        taskCard.style.transition = 'opacity 0.3s ease-out';
                        taskCard.style.opacity = '0';
                        setTimeout(() => {
                            taskCard.remove();
                            
                            // Check if no tasks left and show empty state
                            const tasksContainer = document.getElementById('tasksContainer');
                            if (tasksContainer && tasksContainer.children.length === 0) {
                                location.reload(); // Reload to show empty state properly
                            }
                        }, 300);
                    }
                    
                    // The SignalR notification will show the success toast
                    currentTaskId = null;
                } else {
                    throw new Error(`Failed to delete task: ${response.status}`);
                }
            } catch (error) {
                console.error('Error deleting task:', error);
                alert('Failed to delete task. Please try again.');
            } finally {
                // Reset loading state
                deleteBtn.disabled = false;
                spinner.classList.add('d-none');
            }
        });

        });
    </script>
}