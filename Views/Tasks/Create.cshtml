<!-- Views/Tasks/Create.cshtml - Progressive Enhancement -->
@model TaskManager.Web.ViewModels.Tasks.CreateTaskViewModel
@{
    ViewData["Title"] = "Create Task";
}

<div class="row justify-content-center">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header bg-white">
                <h4 class="mb-0">
                    <i class="fas fa-plus me-2 text-primary"></i>Create New Task
                </h4>
            </div>
            <div class="card-body">
                <!-- Success/Error Messages -->
                <div id="ajax-messages"></div>
                
                <form id="createTaskForm" asp-action="Create" method="post">
                    @Html.AntiForgeryToken()
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                    
                    <div class="mb-3">
                        <label asp-for="Title" class="form-label"></label>
                        <input asp-for="Title" class="form-control" placeholder="Enter task title...">
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>
                    
                    <div class="mb-3">
                        <label asp-for="Description" class="form-label"></label>
                        <textarea asp-for="Description" class="form-control" rows="4" placeholder="Task description (optional)..."></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label asp-for="Priority" class="form-label"></label>
                            <select asp-for="Priority" class="form-select">
                                @foreach (TaskPriority priority in Enum.GetValues<TaskPriority>())
                                {
                                    <option value="@priority">@priority</option>
                                }
                            </select>
                        </div>
                        
                        <div class="col-md-4 mb-3">
                            <label asp-for="DueDate" class="form-label"></label>
                            <input asp-for="DueDate" type="datetime-local" class="form-control">
                        </div>
                        
                        <div class="col-md-4 mb-3">
                            <label asp-for="ProjectId" class="form-label"></label>
                            <select asp-for="ProjectId" asp-items="Model.Projects" class="form-select">
                                <option value="">No Project</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-between">
                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="fas fa-arrow-left me-2"></i>Back to Tasks
                        </a>
                        <button type="submit" class="btn btn-primary" id="submitBtn">
                            <i class="fas fa-save me-2"></i>Create Task
                        </button>
                    </div>
                </form>
                
                <!-- Optional: Add a toggle for AJAX vs normal submission -->
                <div class="mt-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="useAjax" checked>
                        <label class="form-check-label text-muted small" for="useAjax">
                            <i class="fas fa-bolt me-1"></i>Enhanced mode (stay on page, show toast notification)
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('createTaskForm');
            const submitBtn = document.getElementById('submitBtn');
            const useAjaxCheckbox = document.getElementById('useAjax');
            const messagesContainer = document.getElementById('ajax-messages');
            
            // Progressive enhancement - only hijack form if AJAX is enabled
            form.addEventListener('submit', async function(e) {
                // Check if AJAX mode is enabled
                if (!useAjaxCheckbox.checked) {
                    // Let the form submit normally
                    console.log('üìÑ Using normal form submission');
                    return;
                }
                
                // AJAX mode - prevent normal submission
                e.preventDefault();
                console.log('‚ö° Using AJAX submission');
                
                const originalBtnText = submitBtn.innerHTML;
                
                // Clear previous messages
                messagesContainer.innerHTML = '';
                
                // Show loading state
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating...';
                
                try {
                    // Get form data
                    const formData = new FormData(form);
                    
                    // Submit via AJAX
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData
                    });
                    
                    if (response.ok) {
                        // Success
                        console.log('‚úÖ Task created successfully via AJAX!');
                        
                        // Show success message
                        showMessage('success', 'Task created successfully! The toast notification should appear shortly.');
                        
                        // Reset form
                        form.reset();
                        
                        // Wait for SignalR notification, then redirect
                        setTimeout(() => {
                            window.location.href = '/Tasks';
                        }, 2000);
                        
                    } else {
                        // Handle errors
                        const errorText = await response.text();
                        console.error('‚ùå Task creation failed:', response.status, errorText);
                        
                        if (response.status === 400) {
                            // Validation errors - parse and display
                            try {
                                // Try to parse validation errors from response
                                showMessage('danger', 'Please check the form for validation errors.');
                            } catch {
                                showMessage('danger', 'Validation failed. Please check your input.');
                            }
                        } else {
                            showMessage('danger', `Server error (${response.status}). Please try again.`);
                        }
                    }
                    
                } catch (error) {
                    console.error('‚ùå Network error:', error);
                    showMessage('danger', 'Network error. Please check your connection and try again.');
                } finally {
                    // Reset button state
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = originalBtnText;
                }
            });
            
            // Helper function to show messages
            function showMessage(type, text) {
                const alert = document.createElement('div');
                alert.className = `alert alert-${type} alert-dismissible fade show`;
                
                const icon = type === 'success' ? 'check-circle' : 
                           type === 'danger' ? 'exclamation-circle' : 'info-circle';
                
                alert.innerHTML = `
                    <i class="fas fa-${icon} me-2"></i>${text}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                
                messagesContainer.appendChild(alert);
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    if (alert.parentNode) {
                        alert.remove();
                    }
                }, 5000);
            }
            
            // Update button text based on mode
            useAjaxCheckbox.addEventListener('change', function() {
                const modeText = this.checked ? '‚ö° Enhanced' : 'üìÑ Standard';
                console.log(`Mode switched to: ${modeText}`);
            });
        });
    </script>
}