<!-- Views/Search/Index.cshtml -->
@model TaskManager.Web.ViewModels.Search.SearchViewModel
@{
    ViewData["Title"] = "Search Tasks";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <!-- Search Filters Sidebar -->
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-filter me-2"></i>Search Filters
                    </h5>
                </div>
                <div class="card-body">
                    <form method="get" id="searchForm">
                        <!-- Main Search -->
                        <div class="mb-3">
                            <label class="form-label">Search Query</label>
                            <div class="position-relative">
                                <input type="text" 
                                       name="Query" 
                                       value="@Model.Query" 
                                       class="form-control" 
                                       placeholder="Search tasks, projects..."
                                       id="searchInput"
                                       autocomplete="off">
                                <div id="searchSuggestions" class="position-absolute w-100 bg-white border rounded shadow-sm" style="top: 100%; z-index: 1000; display: none;"></div>
                            </div>
                        </div>

                        <!-- Status Filter -->
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            @foreach (var status in Model.StatusOptions)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" 
                                           type="checkbox" 
                                           name="SelectedStatuses" 
                                           value="@status"
                                           id="status_@status"
                                           @(Model.SelectedStatuses?.Contains(status) == true ? "checked" : "")>
                                    <label class="form-check-label" for="status_@status">
                                        @status
                                    </label>
                                </div>
                            }
                        </div>

                        <!-- Priority Filter -->
                        <div class="mb-3">
                            <label class="form-label">Priority</label>
                            @foreach (var priority in Model.PriorityOptions)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" 
                                           type="checkbox" 
                                           name="SelectedPriorities" 
                                           value="@priority"
                                           id="priority_@priority"
                                           @(Model.SelectedPriorities?.Contains(priority) == true ? "checked" : "")>
                                    <label class="form-check-label" for="priority_@priority">
                                        @priority
                                    </label>
                                </div>
                            }
                        </div>

                        <!-- Date Filters -->
                        <div class="mb-3">
                            <label class="form-label">Due Date From</label>
                            <input type="date" name="DueDateFrom" value="@Model.DueDateFrom?.ToString("yyyy-MM-dd")" class="form-control">
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Due Date To</label>
                            <input type="date" name="DueDateTo" value="@Model.DueDateTo?.ToString("yyyy-MM-dd")" class="form-control">
                        </div>

                        <!-- Overdue Filter -->
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" 
                                       type="checkbox" 
                                       name="ShowOverdueOnly" 
                                       value="true"
                                       id="showOverdue"
                                       @(Model.ShowOverdueOnly ? "checked" : "")>
                                <label class="form-check-label" for="showOverdue">
                                    Show Overdue Only
                                </label>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-search me-2"></i>Search
                            </button>
                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                                <i class="fas fa-times me-2"></i>Clear Filters
                            </a>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Recent Searches -->
            @if (Model.RecentSearches.Any())
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h6 class="mb-0">Recent Searches</h6>
                    </div>
                    <div class="card-body">
                        @foreach (var search in Model.RecentSearches.Take(5))
                        {
                            <a href="@Url.Action("Index", new { Query = search })" 
                               class="d-block text-decoration-none mb-1 small">
                                <i class="fas fa-history me-1"></i>@search
                            </a>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Search Results -->
        <div class="col-md-9">
            <!-- Search Header -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div>
                    <h4 class="mb-0">
                        <i class="fas fa-search me-2"></i>Search Results
                    </h4>
                    @if (!string.IsNullOrEmpty(Model.Query))
                    {
                        <p class="text-muted mb-0">
                            @Model.TotalResults results for "<strong>@Model.Query</strong>" 
                            <small>(@Model.SearchTime ms)</small>
                        </p>
                    }
                </div>
                <div>
                    <a asp-action="Advanced" class="btn btn-outline-primary">
                        <i class="fas fa-cog me-2"></i>Advanced Search
                    </a>
                    <a asp-action="Analytics" class="btn btn-outline-info">
                        <i class="fas fa-chart-bar me-2"></i>Analytics
                    </a>
                </div>
            </div>

            <!-- Results -->
            @if (Model.HasResults)
            {
                <div class="row">
                    @foreach (var task in Model.Results)
                    {
                        <div class="col-12 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <h5 class="card-title">
                                                <a asp-controller="Tasks" asp-action="Details" asp-route-id="@task.Id" 
                                                   class="text-decoration-none">
                                                    @task.Title
                                                </a>
                                            </h5>
                                            
                                            @if (!string.IsNullOrEmpty(task.Description))
                                            {
                                                <p class="card-text text-muted">
                                                    @(task.Description.Length > 150 ? task.Description.Substring(0, 150) + "..." : task.Description)
                                                </p>
                                            }

                                            <div class="d-flex flex-wrap gap-2 mb-2">
                                                <span class="badge bg-@(task.Priority.ToLower() == "high" || task.Priority.ToLower() == "critical" ? "danger" : task.Priority.ToLower() == "medium" ? "warning" : "success")">
                                                    @task.Priority
                                                </span>
                                                <span class="badge bg-@(task.Status.ToLower() == "done" ? "success" : task.Status.ToLower() == "inprogress" ? "primary" : "secondary")">
                                                    @task.Status
                                                </span>
                                                @if (task.IsOverdue)
                                                {
                                                    <span class="badge bg-danger">
                                                        <i class="fas fa-exclamation-triangle me-1"></i>Overdue
                                                    </span>
                                                }
                                                @if (task.Project != null)
                                                {
                                                    <span class="badge" style="background-color: @task.Project.Color">
                                                        @task.Project.Name
                                                    </span>
                                                }
                                            </div>

                                            <small class="text-muted">
                                                <i class="fas fa-calendar me-1"></i>Created: @task.CreatedAt.ToString("MMM dd, yyyy")
                                                @if (task.DueDate.HasValue)
                                                {
                                                    <span class="ms-3">
                                                        <i class="fas fa-clock me-1"></i>Due: @task.DueDate.Value.ToString("MMM dd, yyyy")
                                                    </span>
                                                }
                                            </small>
                                        </div>
                                        
                                        <div class="text-end">
                                            <a asp-controller="Tasks" asp-action="Details" asp-route-id="@task.Id" 
                                               class="btn btn-sm btn-outline-primary">
                                                View Details
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Pagination -->
                @if (Model.TotalPages > 1)
                {
                    <nav aria-label="Search results pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                                <a class="page-link" 
                                   href="@Url.Action("Index", new { 
                                       Query = Model.Query, 
                                       Page = Model.PreviousPage,
                                       SelectedStatuses = Model.SelectedStatuses,
                                       SelectedPriorities = Model.SelectedPriorities,
                                       ShowOverdueOnly = Model.ShowOverdueOnly,
                                       DueDateFrom = Model.DueDateFrom,
                                       DueDateTo = Model.DueDateTo
                                   })">
                                    Previous
                                </a>
                            </li>

                            @for (int i = Math.Max(1, Model.Page - 2); i <= Math.Min(Model.TotalPages, Model.Page + 2); i++)
                            {
                                <li class="page-item @(i == Model.Page ? "active" : "")">
                                    <a class="page-link" 
                                       href="@Url.Action("Index", new { 
                                           Query = Model.Query, 
                                           Page = i,
                                           SelectedStatuses = Model.SelectedStatuses,
                                           SelectedPriorities = Model.SelectedPriorities,
                                           ShowOverdueOnly = Model.ShowOverdueOnly,
                                           DueDateFrom = Model.DueDateFrom,
                                           DueDateTo = Model.DueDateTo
                                       })">
                                        @i
                                    </a>
                                </li>
                            }

                            <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                                <a class="page-link" 
                                   href="@Url.Action("Index", new { 
                                       Query = Model.Query, 
                                       Page = Model.NextPage,
                                       SelectedStatuses = Model.SelectedStatuses,
                                       SelectedPriorities = Model.SelectedPriorities,
                                       ShowOverdueOnly = Model.ShowOverdueOnly,
                                       DueDateFrom = Model.DueDateFrom,
                                       DueDateTo = Model.DueDateTo
                                   })">
                                    Next
                                </a>
                            </li>
                        </ul>
                    </nav>
                }
            }
            else if (!string.IsNullOrEmpty(Model.Query))
            {
                <!-- No Results -->
                <div class="text-center py-5">
                    <i class="fas fa-search fa-3x text-muted mb-3"></i>
                    <h4>No results found</h4>
                    <p class="text-muted">No tasks match your search criteria. Try adjusting your filters or search terms.</p>
                    <div class="mt-3">
                        <a href="@Url.Action("Index")" class="btn btn-outline-primary">
                            <i class="fas fa-times me-2"></i>Clear Search
                        </a>
                        <a asp-controller="Tasks" asp-action="Create" class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>Create New Task
                        </a>
                    </div>
                </div>
            }
            else
            {
                <!-- Empty State -->
                <div class="text-center py-5">
                    <i class="fas fa-search fa-3x text-muted mb-3"></i>
                    <h4>Search Your Tasks</h4>
                    <p class="text-muted">Enter a search term to find your tasks, projects, and comments.</p>
                    <div class="mt-3">
                        <button class="btn btn-primary" onclick="document.getElementById('searchInput').focus()">
                            <i class="fas fa-search me-2"></i>Start Searching
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Search suggestions with debouncing
            let searchTimeout;
            const searchInput = $('#searchInput');
            const suggestionsContainer = $('#searchSuggestions');
            
            searchInput.on('input', function() {
                const query = $(this).val();
                
                clearTimeout(searchTimeout);
                
                if (query.length >= 2) {
                    searchTimeout = setTimeout(function() {
                        fetchSuggestions(query);
                    }, 300);
                } else {
                    suggestionsContainer.hide().empty();
                }
            });
            
            function fetchSuggestions(query) {
                $.get('@Url.Action("Suggestions")', { query: query })
                    .done(function(suggestions) {
                        if (suggestions && suggestions.length > 0) {
                            let html = '';
                            suggestions.forEach(function(suggestion) {
                                html += `<div class="p-2 border-bottom suggestion-item" style="cursor: pointer;">${suggestion}</div>`;
                            });
                            suggestionsContainer.html(html).show();
                        } else {
                            suggestionsContainer.hide();
                        }
                    })
                    .fail(function() {
                        suggestionsContainer.hide();
                    });
            }
            
            // Handle suggestion clicks
            $(document).on('click', '.suggestion-item', function() {
                const suggestion = $(this).text();
                searchInput.val(suggestion);
                suggestionsContainer.hide();
                $('#searchForm').submit();
            });
            
            // Hide suggestions when clicking outside
            $(document).on('click', function(e) {
                if (!$(e.target).closest('#searchInput, #searchSuggestions').length) {
                    suggestionsContainer.hide();
                }
            });
            
            // Auto-submit form on filter changes
            $('.form-check-input, input[type="date"]').on('change', function() {
                $('#searchForm').submit();
            });
            
            // Highlight search terms in results
            @if (!string.IsNullOrEmpty(Model.Query))
            {
                <text>
                highlightSearchTerms('@Html.Raw(Html.Encode(Model.Query))');
                </text>
            }
        });
        
        function highlightSearchTerms(query) {
            if (!query) return;
            
            const terms = query.toLowerCase().split(' ').filter(term => term.length > 2);
            
            $('.card-title, .card-text').each(function() {
                let html = $(this).html();
                
                terms.forEach(function(term) {
                    const regex = new RegExp(`(${term})`, 'gi');
                    html = html.replace(regex, '<mark>$1</mark>');
                });
                
                $(this).html(html);
            });
        }
    </script>
}